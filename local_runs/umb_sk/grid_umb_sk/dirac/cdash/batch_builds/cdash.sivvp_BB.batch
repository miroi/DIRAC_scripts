#!/bin/bash

#PBS -S /bin/bash
#PBS -N DIRACbuild
#PBS -A UMB-ITMS-26110230082
### Declare myprogram non-rerunable
#PBS -r n
##PBS -l nodes=1:ppn=12:old
#PBS -l nodes=1:ppn=6
#PBS -l walltime=8:00:00
#PBS -l mem=26g
#PBS -j oe
#PBS -q batch

echo -e "\n Working host is: \c"; hostname -f; 
echo -e " Today is : \c"; date

source /mnt/apps/intel/bin/compilervars.sh intel64
echo -e "\n Intel Fortran/C/C++ compilers with MKL library activated, PROD_DIR=$PROD_DIR."
#export MATH_ROOT=/mnt/apps/intel/mkl; echo -e "Activated MATH_ROOT=$MATH_ROOT"
echo -e "MKLROOT=${MKLROOT}"
echo -e "ifort ? \c"; which ifort; ifort -V
echo -e "\n"

source /mnt/apps/pgi/environment.sh
echo -e "Portlang Group compilers activated ! PGI=$PGI"
echo -e "pgf90 ? \c"; which pgf90; pgf90 -V
echo -e "\n"
# ask on compilers
echo -e "which ifort ? \c"; which ifort; ifort -V
echo -e "which gfortran ? \c"; which gfortran; gfortran --version
echo -e "which pgf90 ? \c"; which pgf90; pgf90 --version

# my cmake stuff
#export PATH=/home/milias/bin/cmake/bin:$PATH
#echo "My own CMake is in PATH."

# my most recent python 2.7.1 #
#export PATH=/people/disk2/ilias/bin/python/Python-2.7.1:$PATH

echo "Running on host `hostname`"
echo "Time is `date`"
echo "Directory is `pwd`"
echo "This jobs runs on the following processors:"
echo `cat $PBS_NODEFILE`
# Define number of processors
NPROCS_PBS=`wc -l < $PBS_NODEFILE`
NPROCS=`cat /proc/cpuinfo | grep processor | wc -l`
echo "This node has $NPROCS CPUs."
echo "...but has reserved $NPROCS_PBS CPUs for PBS job."
echo "PBS_SERVER=$PBS_SERVER"
echo "PBS_NODEFILE=$PBS_NODEFILE"
echo "PBS_O_QUEUE=$PBS_O_QUEUE"
echo "PBS_O_WORKDIR=$PBS_O_WORKDIR"

timestamp1=`date +\%F_\%k-\%M-\%S`; timestamp=${timestamp1// /};
echo -e "\n\n Running DIRAC cdash buildups at "$timestamp ; echo -e "\n\n"

# my most recent python 2.7.1 #
#export PATH=/people/disk2/ilias/bin/python/Python-2.7.1:$PATH

# own cmake installation for nodes
#export PATH=/home/milias/bin/cmake/bin/:$PATH
echo -e "which cmake ? \c"
which cmake; cmake --version
which ctest; ctest --version

# check own git installation for nodes
#export PATH=/home/milias/bin/git_cloned/bin:$PATH
echo -e "\n which git ? \c"; which git; git --version
# check Python
echo -e "which python ? \c"; which python; python -V

export LC_ALL=C
#export MKL_NUM_THREADS=${NPROCS_PBS}
export MKL_NUM_THREADS=1
export MKL_DYNAMIC="FALSE"
export OMP_NUM_THREADS=1
#

echo -e "My PATH=$PATH"

#
# Make clean space ....
#
cd /mnt/local/$USER
echo -e "in  /mnt/local/$USER .... pwd; ls -lt ? \c"; pwd; ls -lt
echo -e "\n cleaning /mnt/local/$USER before... /bin/rm -rf /mnt/local/$USER/*";
/bin/rm -rf /mnt/local/$USER/*
echo -e "after cleaning, pwd; ls -lt ? \c"; pwd; ls -lt


SCRATCH=/mnt/local/$USER/$PBS_JOBID
mkdir ${SCRATCH}
echo -e "\n In ${SCRATCH} ? \c"; pwd; 
cd ${SCRATCH}

# Clone DIRAC into unique directory on scratch
TRUNK=trunk.$PBS_JOBID
git clone --recursive git@gitlab.com:dirac/dirac.git ${TRUNK}
DIRAC=${SCRATCH}/${TRUNK}
echo -e "pwd; ls -lt ${DIRAC} ? \c"; pwd; ls -lt ${DIRAC}
cd ${DIRAC}
git submodule update --init --recursive

# set time for Test
export DIRTIMEOUT="20m"
# set scratch directory on nodes (~/.diracrc setting must be deactivated)
export DIRAC_TMPDIR=${SCRATCH}


###############################################
#      serial DIRAC buildup, Intel MKL        #
###############################################
BUILD_SERIAL=build_intelmkl_i8
cd ${DIRAC}
echo -e "\n\n Running serial, dynamic Intel/MKL/i8 DIRAC buildup in $BUILD_SERIAL"
#
if [[ -d "$BUILD_SERIAL" ]]; then
  echo "deleting previous build directory $BUILD_SERIAL"
  /bin/rm -rf $BUILD_SERIAL
fi
#python ./setup  --int64 --fc=ifort --cc=icc --cxx=icpc --cmake-options="-D BUILDNAME='sivvp-UMB_Intel_mkl_i8-batch' -D DART_TESTING_TIMEOUT=99999" $BUILD_SERIAL
python ./setup  --int64 --fc=ifort --cc=icc --cxx=icpc --cmake-options="-D ENABLE_STIELTJES=ON -D ENABLE_PCMSOLVER=ON -D BUILDNAME='sivvp-UMB_Intel_mkl_i8-batch' -D DART_TESTING_TIMEOUT=99999" $BUILD_SERIAL
cd $BUILD_SERIAL
#ctest  --track Miro  -D ExperimentalUpdate 
#ctest   -D ExperimentalConfigure 
ctest -VV -j$NPROCS_PBS -D ExperimentalBuild 

echo -e "\n Created dirac.x executable ? \c"; ls -lt dirac.x
ldd dirac.x

#ctest   -D ExperimentalTest 
ctest -VV -j$NPROCS_PBS  -D ExperimentalTest -L short
ctest  -VV -D ExperimentalSubmit 

##############################################################################
#          serial,static DIRAC buildup with Intel+MKL
##############################################################################
BUILD_SERIAL_STATIC=build_intelmkl_i8_static_batch
echo -e "\n\n Running serial, static Intel/MKL/i8 DIRAC buildup in $BUILD_SERIAL_STATIC"
cd ${DIRAC}
if [[ -d "$BUILD_SERIAL_STATIC" ]]; then
  echo "deleting previous build directory $BUILD_SERIAL_STATIC"
  /bin/rm -rf $BUILD_SERIAL_STATIC
fi
python ./setup --int64 --fc=ifort --cc=icc --cxx=icpc --static --cmake-options="-D ENABLE_STIELTJES=ON -D ENABLE_PCMSOLVER=ON -D BUILDNAME='sivvp-UMB_Intel_mkl_i8_static-batch'  -D DART_TESTING_TIMEOUT=99999" $BUILD_SERIAL_STATIC
cd $BUILD_SERIAL_STATIC
#ctest  -D ExperimentalConfigure
ctest -VV -j$NPROCS_PBS  -D ExperimentalBuild

echo -e "\n Created dirac.x executable ? \c"; ls -lt dirac.x
ldd dirac.x

ctest -VV -j$NPROCS_PBS -D ExperimentalTest -L short
#ctest  -D ExperimentalTest -R cosci_energy
ctest -VV -D ExperimentalSubmit 

#####################################################
#        serial DIRAC buildup with GNU+mkl
#####################################################
BUILD_GNU=build_gnu_mkl_i8
echo -e "\n\n Running serial GNU/MKL/i8 DIRAC buildup in $BUILD_GNU"
cd ${DIRAC}
if [[ -d "$BUILD_GNU" ]]; then
  echo "deleting previous build directory $BUILD_GNU"
  /bin/rm -rf $BUILD_GNU
fi
python ./setup --int64 --fc=gfortran --cc=gcc --cxx=g++  --cmake-options="-D BUILDNAME='sivvp-UMB_GNU_mkl_i8-batch'  -D DART_TESTING_TIMEOUT=99999 -D ENABLE_STIELTJES=ON -D ENABLE_PCMSOLVER=ON"  $BUILD_GNU
cd $BUILD_GNU
#ctest   -D ExperimentalConfigure 
ctest -VV -j$NPROCS_PBS  -D ExperimentalBuild  

echo -e "\n Created dirac.x executable ? \c"; ls -lt dirac.x
ldd dirac.x

#ctest -j$NPROCS_PBS  -D ExperimentalTest -R cosci_energy 
ctest -VV -j$NPROCS_PBS  -D ExperimentalTest -L short
ctest -VV  -D ExperimentalSubmit  

#####################################################
#        serial DIRAC buildup with PGI+mkl
#####################################################
BUILD_PGI=build_pgi_mkl_i8
echo -e "\n\n Running serial PGI/MKL/i8 DIRAC buildup in $BUILD_PGI"
cd ${DIRAC}
if [[ -d "$BUILD_PGI" ]]; then
  echo "deleting previous build directory $BUILD_PGI"
  /bin/rm -rf $BUILD_PGI
fi
python ./setup --int64 --fc=pgf90 --cc=pgcc --cxx=pgCC --cmake-options="-D BUILDNAME='sivvp-UMB_PGI_mkl_i8-batch'  -D DART_TESTING_TIMEOUT=99999 -D ENABLE_STIELTJES=ON -D ENABLE_PCMSOLVER=ON" $BUILD_PGI
cd $BUILD_PGI
#ctest -V -D ExperimentalConfigure 
ctest -VV -j$NPROCS_PBS -D ExperimentalBuild   

echo -e "\n Created dirac.x executable ? \c"; ls -lt dirac.x
ldd dirac.x

#ctest -D ExperimentalTest -R cosci_energy  
ctest -VV -j$NPROCS_PBS -D ExperimentalTest -L short
ctest -VV -D ExperimentalSubmit 

timestamp1=`date +\%F_\%k-\%M-\%S`; timestamp=${timestamp1// /};
echo -e "\n\n All buildups finished at "$timestamp

exit 0
