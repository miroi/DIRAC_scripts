from plams   import *                                                                                                      
from itertools import chain  

def main():                                                                                             
    basis  = 'dyall.cv4z'                                                                                                  
    bonds  = create_dist() 
    # name of the jobs to run e.g. "BaF_2.225"                                                                                                
    names  = ["BaF_{:4.3f}".format(r) for r in bonds]     

    # Using the distance between the Ba and F create a Plams Molecule                                                                 
    mols   =  [create_molecule(*rs) for rs in zip(names, bonds)]                                                           

    # Write geometry in xyz format                                                                                                                       
    for mol, name in zip(mols, names):                                                                                     
        ns = '{}.xyz'.format(name)                                                                                         
        mol.write(ns)                                                                                                      

   # Create all the dirac jobs for different molecular geometries                                                                                                                    
    jobs     = [create_job(basis, name, mol) for name, mol in zip(names, mols)]    
    # Configuration to run the jobs using Slurm and maximum 10 jobs in parallel.                                     
    gr = GridRunner(parallel=True, maxjobs=10, grid='slurm') 
     # Running all the jobs                                                        
    results  = [job.run(jobrunner=gr, nodes=1, walltime="5:00:00") for job in jobs]                                        

    # Waiting for the jobs to be executed                                                                                                                       
    for r in results:                                                                                                      
        r.wait()       

def create_job(basis, name, mol):
     """
     Function to create a FSCC Dirac Job using a basis, a name for the job and a plams molecule.
     Notice that DIRAC is case sensitive, therefore the Settings declaration should 
     follow this convention.
     """                                                                                                                                                                                                         
    job  = DiracJob(name=name, molecule=mol)                                                                            

    # It does not write the molecule in the input, instead it uses an xyz file                                                                                                                        
    job.settings.ignore_molecule                                                                                           

    job.settings.input.dirac['WAVE FUNCTION']                                                                              
    job.settings.input.dirac["4INDEX"]                                                                                     

    job.settings.input.HAMILTONIAN.X2Cmmf                                                                                  
    job.settings.input.HAMILTONIAN.GAUNT                                                                                   

    job.settings.input.INTEGRALS.READIN["UNCONT"]                                                                          

    job.settings.input['WAVE FUNCTION']["relccsd"]                                                                         
    job.settings.input['WAVE FUNCTION']["scf"]                                                                             
    job.settings.input["WAVE FUNCTION"]["SCF"]["_en"] = True                                                               
    job.settings.input["WAVE FUNCTION"]["SCF"]["CLOSED SHELL"] = 64                                                        
    job.settings.input["WAVE FUNCTION"]["SCF"]["MAXITR"] = 50                                                              
    job.settings.input["WAVE FUNCTION"]["SCF"]["EVCCNV"] = "1.0D-9 5.0D-8"                                                 

    job.settings.input.moltra.active  = 'energy -3.0 30.0 0.01'                                                            

    job.settings.input.molecule.basis.default = basis                                                                      
    job.settings.input.molecule.basis.special = 'F BASIS cc-pVDZ'                                                          

    job.settings.input.relccsd.FOCKSPACE                                                                                   
    job.settings.input.relccsd.CCSORT.NORECM                                                                               
    job.settings.input.relccsd.CCFSPC.DOEA                                                                                 
    job.settings.input.relccsd.CCFSPC.NACTP = '6 6'                                                                        

    return job    

def create_molecule(name, r):
    """
    Note: Alternatively you can provide to Plams with .xyz files, like:
     >>> mol = Molecule("<path/to/xyz>")
    """                                                                                              
    mol = Molecule()                                                                                                       
    mol.add_atom(Atom(symbol='Ba', coords=(0, 0, 0)))                                                                      
    mol.add_atom(Atom(symbol='F', coords=(0, 0, r)))                                                                       

    return mol    

def create_dist():                                                                                                         
    """
    Function to create 50 inter-nuclear distances.
   The equilibrium distance is 2.25  in a.u.
    """                                                                                               
    xs1 = [1.5 + i * 5.0e-2 for i in range(10)]                                                                            
    xs2 = [2.0 + i * 2.5e-2 for i in range(20)]                                                                            
    xs3 = [2.5 + i * 7.5e-2 for i in range(20)]                                                                            

    # Return the concatenation of the points                                                                                                                           
    return list(chain(*[xs1, xs2, xs3])) 


if __name__ == "__main__":
    # Init should be called before calling the main function
    init()
    # run this script
    main()
   # finally clean the environment
    finish()
