#!/bin/bash

#
#
#  05 00 * * 1,2,3,4,5,6,7  S=/home/ilias/Work/qch/projects/My_scripts/local_runs/pd_uniza_sk; $S/cdash.frpd2 > $S/cdash_frpd2_buildup.log 2>&1 
#
#

# the directory where your DIRAC sits #
DIRAC=/home/ilias/Work/qch/qch_software/dirac/trunk

export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

export DIRTIMEOUT="14m"

export CTEST_PROJECT_NAME="DIRACext"

export PATH=/home/ilias/bin/cmake/cmake-3.3.0-Linux-x86_64/bin:$PATH
echo -e "\n cmake --version ?"; cmake --version

# go to the local DIRAC directory
cd $DIRAC

# clean dir
git clean -f -d -x

# get the fresh clone
git pull origin master

git submodule update --init --recursive
git submodule status

git status

BUILD_GNU=build_gnu_i8
# configure step
python ./setup  --int64 --blas=off --lapack=off  --cmake-options="-D BUILDNAME='gnu_i8' -D DART_TESTING_TIMEOUT=99999 -D ENABLE_BOUNDS_CHECK=ON -D PYTHON_EXECUTABLE=/usr/bin/python -D ENABLE_UNIT_TESTS=ON -D ENABLE_BUILTIN_BLAS=ON -D ENABLE_BUILTIN_LAPACK=ON" $BUILD_GNU 
cd $BUILD_GNU
ctest  -D ExperimentalConfigure  
ctest -j3 -D ExperimentalBuild  
ctest -j3 -D ExperimentalTest  -L short
ctest  -D ExperimentalSubmit    
#
#
echo -e "\n Preparing release version from master, make release"
make -j3 release
echo "is DIRAC-16.0-Source.tar.gz ?"
ls -lt DIRAC-16.0-Source.tar.gz
tar xzf DIRAC-16.0-Source.tar.gz
cd DIRAC-16.0-Source
python ./setup  --int64 --type=debug  --cmake-options="-D BUILDNAME='gnu_i8_RELEASE'"  build_release
cd build_release
ctest  -D ExperimentalConfigure
ctest -j3 -D ExperimentalBuild
ctest  -D ExperimentalSubmit


cd $DIRAC
BUILD_GNU1=build_gnu_i4
# configure step
python ./setup --cmake-options="-D BUILDNAME='frpd2.gnu_i4' -D DART_TESTING_TIMEOUT=99999 -D ENABLE_BOUNDS_CHECK=OFF -D PYTHON_EXECUTABLE=/usr/bin/python  -D ENABLE_UNIT_TESTS=ON" $BUILD_GNU1
cd $BUILD_GNU1
ctest -j3 -D Experimental -L short 


####  server's Intel compilers  ####
#if [[ -z $PROD_DIR ]]; then
#  source /home/ilias/intel/bin/compilervars.sh intel64
#  echo "Intel Fortran/C/C++ noncommercial compilers with MKL library activated."
#  export MATH_ROOT=/home/ilias/intel/mkl; echo "Activated MATH_ROOT=$MATH_ROOT"
#fi
#cd $DIRAC
#BUILD_INTEL=build_intelmkl_i8
# configure step
#python ./setup --fc=ifort  --cc=icc  --cxx=g++  --int64 --cmake-options="-D BUILDNAME='intel_g++_mkl_i8' -D DART_TESTING_TIMEOUT=99999 -D ENABLE_BOUNDS_CHECK=OFF -D ENABLE_PCMSOLVER=ON   -D ENABLE_UNIT_TESTS=ON -D PYTHON_EXECUTABLE=/usr/bin/python" $BUILD_INTEL
#cd $BUILD_INTEL
#export MKL_NUM_THREADS=3
#export MKL_DYNAMIC="FALSE"
#ctest -D Experimental


############################################
### Now run Nightly buildup with cloning ###
############################################
export CTEST_PROJECT_NAME="DIRAC"
TMP_DIR=/tmp/ilias/DIRAC_build
if [[ -d "$TMP_DIR" ]]; then
  /bin/rm -rf $TMP_DIR
  mkdir -p $TMP_DIR
else
  mkdir -p $TMP_DIR
fi
git clone --recursive git@repo.ctcc.no:dirac.git  $TMP_DIR
cd $TMP_DIR
git submodule update --init --recursive
BUILD_INTEL=build_ifort_icc_g++_mkl_i8
# configure step
python ./setup --fc=ifort  --cc=icc  --cxx=g++  --int64  --cmake-options="-D BUILDNAME='ifort_icc_g++_mkl_i8' -D DART_TESTING_TIMEOUT=99999 -D ENABLE_BOUNDS_CHECK=OFF  -D ENABLE_UNIT_TESTS=ON -D PYTHON_EXECUTABLE=/usr/bin/python" $BUILD_INTEL
cd $BUILD_INTEL
export MKL_NUM_THREADS=3
export MKL_DYNAMIC="FALSE"
ctest -D Nightly --track master

exit 0
